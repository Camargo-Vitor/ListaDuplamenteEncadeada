from lista import Lista
import os

def teste_lista_vazia():
    # Teste 1 - Todas as funções como primeira execução (lista vazia)
    # Cada bloco reinicia a lista para garantir que os testes sejam independentes.

    print('>>> [acessarAtual()] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.acessarAtual())
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [Buscar(42)] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.Buscar(42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [inserirComoPrimeiro(42)] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.inserirComoPrimeiro(42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [ExcluirAtual()] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.ExcluirAtual())
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [ExcluirPrim()] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.ExcluirPrim())
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [ExcluirUlt()] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.ExcluirUlt())
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [InserirAntesDoAtual(42)] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.InserirAntesDoAtual(42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [InserirApósAtual(42)] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.InserirApósAtual(42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [inserirComoUltimo(42)] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.inserirComoUltimo(42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [num_elementos()] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.num_elementos())
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [InserirNaPosicao(4, 42)] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.inserirNaPosicao(4, 42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [InserirNaPosicao(0, 42)] com lista vazia')
    lista_duplamente_encadeada = Lista()
    print('Return: ', lista_duplamente_encadeada.inserirNaPosicao(0, 42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

def teste_lista_unitaria():
    # Teste 2 - Todas as funções contendo somente 1 elemento
    # Cada bloco reinicia a lista para garantir que os testes sejam independentes.

    print('>>> [acessarAtual()] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.acessarAtual())
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [Buscar(42)] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.Buscar(42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [Buscar(1)] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.Buscar(1))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [inserirComoPrimeiro(42)] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.inserirComoPrimeiro(42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [ExcluirAtual()] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.ExcluirAtual())
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [ExcluirPrim()] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.ExcluirPrim())
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [ExcluirUlt()] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.ExcluirUlt())
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [InserirAntesDoAtual(42)] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.InserirAntesDoAtual(42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [InserirApósAtual(42)] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.InserirApósAtual(42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [inserirComoUltimo(42)] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.inserirComoUltimo(42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [num_elementos()] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.num_elementos())
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [InserirNaPosicao(4, 42)] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.inserirNaPosicao(4, 42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [InserirNaPosicao(0, 42)] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.inserirNaPosicao(0, 42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

    print('>>> [InserirNaPosicao(1, 42)] com lista unitaria')
    lista_duplamente_encadeada = Lista()
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    print('Return: ', lista_duplamente_encadeada.inserirNaPosicao(1, 42))
    print('Posição do Cursor: ', f"{lista_duplamente_encadeada.acessarAtual()}")
    print('Lista Final: ', end='')
    lista_duplamente_encadeada.mostra_lista()
    print()

def teste_pop():
    # Teste 3 - Popular a lista e logo em seguida excluir elementos até que se torne vazia novamente.

    lista_duplamente_encadeada = Lista()
    
    print('>>> InserirComoUltimo(5)')
    lista_duplamente_encadeada.inserirComoUltimo(5)
    lista_duplamente_encadeada.mostra_lista()

    print('>>> InserirComoPrimeiro(1)')
    lista_duplamente_encadeada.inserirComoPrimeiro(1)
    lista_duplamente_encadeada.mostra_lista()

    print('>>> Buscar(5)')
    print('>>> InserirApósAtual(42)')
    lista_duplamente_encadeada.Buscar(5)
    lista_duplamente_encadeada.InserirApósAtual(42)
    lista_duplamente_encadeada.mostra_lista()

    print('>>> Buscar(1)')
    print('>>> InserirApósAtual(24)')
    lista_duplamente_encadeada.Buscar(1)
    lista_duplamente_encadeada.InserirApósAtual(24)
    lista_duplamente_encadeada.mostra_lista()

    print('>>> Buscar(24)')
    print('>>> InserirAntesDoAtual(50)')
    lista_duplamente_encadeada.Buscar(24)
    lista_duplamente_encadeada.InserirAntesDoAtual(50)
    lista_duplamente_encadeada.mostra_lista()

    print('>>> ExcluirAtual()')
    lista_duplamente_encadeada.ExcluirAtual()
    lista_duplamente_encadeada.mostra_lista()

    print('>>> ExcluirUlt()')
    lista_duplamente_encadeada.ExcluirUlt()
    lista_duplamente_encadeada.mostra_lista()

    print('>>> ExcluirPrim()')
    lista_duplamente_encadeada.ExcluirPrim()
    lista_duplamente_encadeada.mostra_lista()

    print('>>> ExcluirUlt()')
    lista_duplamente_encadeada.ExcluirUlt()
    lista_duplamente_encadeada.mostra_lista()

    print('>>> ExcluirPrim()')
    lista_duplamente_encadeada.ExcluirPrim()
    lista_duplamente_encadeada.mostra_lista()

while True:
    os.system('cls' if os.name == 'nt' else 'clear')
    print('1. Lista Vazia')
    print('2. Lista Unitaria')
    print('3. Popular lista com 5 eleme3ntos e depois torná-la vazia')
    print('(Todos os testes acima listados foram realizados utilizando o código desenvolvido e os métodos públicos da classe "lista")')
    res = input('Digite o teste que deseja executar: ')
    match(res):
        case '1': teste_lista_vazia()
        case '2': teste_lista_unitaria()
        case '3': teste_pop()
    input('[Aperte ENTER para continuar]')